What is Git?
Git is a Source Code Management (SCM), a tool for software developers which supports collaborative development of software within a team, and the tracking of changes to software source code over time.
Git is used by developers, and advanced users who need the very latest changes to the software (before releases occur). Software users generally do not need Git; typically they will download official file releases made available by the project instead.
Developers should familiarize themselves with Git by reading the Git Documentation or traversing through a Git tutorial.
Learn how to contribute to a project, using a forked repo and merge requests:

Features
SourceForge.net provides the following features in its Git offering:
All 1.6.x features of git are supported.
Developer (read/write) access is provided via ssh.
anonymous (read-only) access are provided via git's daemon protocol ("git://").
Several Git clients are supported, including:
The official git client (MS Windows, Mac OS X, Linux, BSD).
Existing repositories may be imported via a normal git push (since git is a distributed SCM).
Repository access may be granted or revoked from a developer using the Project Admin interface.
Repository backups and mirroring may be performed using rsync or git clone.
Service usage is not restricted by quotas.
Multiple repositories are supported.
Management
Git service may be enabled for your project as follows:
Login as a project administrator and:
Click the "Add New..." link in the project menu bar
Click on Git.
Select a name for the label (this will determine the title of the link in the project navigation)
Select a Url Path
Those instructions may be repeated using a different label and path to create multiple repositories.
The standard way to modify the contents of your repository is using a Git client as detailed in the Git User's Manual. Refer to the Getting Started section for how to make your first commit to your new repository.
Options
The following options are available, under the "Admin" section in the left sidebar of your repository:
Viewable Files
Specify here a space delimited list of filename extensions that should be viewable in the browser (ie., plain-text files)
Refresh Repository
The code browser typically will be refreshed automatically when there's a new change, but it can also be manually refreshed if necessary
Permissions
Specific permissions for the repository can be configured here. Fine-grained permissions controls are not supported (e.g. restrict access by specific paths within a repository), if that sort of access control is required, consider creating multiple repositories with different permissions.
Delete
This will delete the repository on our servers, note that while this is normally very quick, there is occasionally a delay in removal.
Developer Access (Read/Write)
We provide read/write access to Git via ssh or https. ssh will provide better performance than https, and should be used whenever possible.
To access a Git repository, configure your Git client as follows (replace PROJECTNAME with the UNIX group name of the project, and the default REPOSITORY is 'code' ):
ssh://USERNAME@git.code.sf.net/p/PROJECTNAME/REPOSITORY (read/write)
If ssh does not work for you, you may use https instead, however, access will be slower:
https://USERNAME@git.code.sf.net/p/PROJECTNAME/REPOSITORY (read/write)
Anonymous access (Read-only)
The read/write protocols detailed above can also be used for read-only access (just remove the "USERNAME@" portion). In addition, you may also use the git and http protocols with the same URLs.
For example:
git://git.code.sf.net/p/PROJECTNAME/REPOSITORY/
https://git.code.sf.net/p/PROJECTNAME/REPOSITORY/
Authentication
The read-only access does not prompt for a password.
The read/write access uses your ssh password or ssh key to authorize your access. To perform write operations, your project administrator must have granted you write access to the repository.
Getting Started
Note: - For all examples below, "PROJECTNAME" represents a SourceForge.net project UNIX name and "USERNAME" represents your SourceForge.net user account.
Your project's Git repository will be completely empty at the start. If you have a local Git version older than 1.6.2, you won't be able to clone (pull) your remote repository while it is empty, so see below for how to set up a local repository to push your content to our servers.
How to create a new local repository
Create an empty repository on your local machine like this:
$ mkdir PROJECTNAME
$ cd PROJECTNAME
$ git init
How to clone an existing repository
For a newer version of git (1.6.2 and later), you can simply clone your empty remote repository and get working:
$ git clone ssh://USERNAME@git.code.sf.net/p/PROJECTNAME/REPOSITORY/ PROJECTNAME-REPOSITORY
$ cd PROJECTNAME-code
The first time you try connecting to the git.code.sf.net host, you should see a message similar to the following:
    The authenticity of host 'git.code.sf.net (216.34.181.155)' can't be established.
    RSA key fingerprint is 86:7b:1b:12:85:35:8a:b7:98:b6:d2:97:5e:96:58:1d.
    Are you sure you want to continue connecting (yes/no)?
Before typing 'yes' to accept the host fingerprint, ensure the fingerprint is correct for the host. You can find a listing of SSH host keys in the SSH Host Key Fingerprints list. If you receive a host key warning, please contact the SourceForge.net team.
Setting your git username
Users should commit to their project repository using their SourceForge.net username. If that is not already set globally, you can set it locally for the current Git repository like this:
$ git config user.name "YOUR NAME"
$ git config user.email "USERNAME@users.sourceforge.net"
You can now use some combination of "git add" and "git commit" commands to create one or more commits in your local repository.
How to push a local repository
If you did not clone one of our remote repositories (for instance, if your older git version won't let you clone an empty repository), you will have to take some manual setup steps to be able to push your content to our servers.
For any local Git repository, you can configure it to push data back to our server by doing the following from inside your Git repository (this replicates what a "git clone" from our servers sets up for you automatically):
$ git remote add origin ssh://USERNAME@git.code.sf.net/p/PROJECTNAME/REPOSITORY
$ git config branch.master.remote origin
$ git config branch.master.merge refs/heads/master
Now you're ready to push the committed files to our servers:
$ git push origin master
Note: The use of "origin master" prevents Git from complaining that the remote server has no branches in common with your local repository (which is true at the start when the remote repository is completely empty), and "master" is the default branch in Git.
After the first push, you will be able to use the simpler "git push" to push the master branch to our "origin" server.
Once that is done, you will be able to browse your newly-committed content via gitweb, clone the repository via either read-only or read/write access methods, push more check-ins, etc.
Webhooks
Webhooks are available for all code repositories. To configure a webhook, go to your repository and in the left menu expand the Admin section. Then click the "Webhooks" link. You can create and update your webhooks there.
The webhook payloads and signature verification method are documented at https://forge-allura.apache.org/p/allura/wiki/Webhooks/
Accessing the repository via the shell
Direct access to the bare repository is also available via [SSH], when logged into the shell, it will be available at:
/home/git/p/PROJECTNAME/REPO.git/
Note that the directory is mounted during the shell creation, if you create a new repository while an existing shell session is still active, use the shutdown command on the shell and start a new session.
Hooks
Direct access to the repository can be used to install custom git hooks server-side. Use our [Shell Service] access and then go to the /home/scm_git/<p>/<pr>/<project>/<repo>/hooks directory.
Note however, that a post-receive hook is used for site-integration, if this hook is changed, the code browser view may not longer automatically update. Instead, you should save any post-receive hook as post-receive-user instead, and it will be called by the default post-receive hook.
If you need to re-create the default post-receive hook, the template for that is:
1
2
3
4
5
6
7
8
9
#!/bin/bash
# The following is required for site integration, do not remove/modify.
# Place user hook code in post-receive-user and it will be called from here.
curl -s https://sourceforge.net/auth/refresh_repo/p/PROJECTNAME/REPOSITORY/

DIR="$(dirname "${BASH_SOURCE[0]}")"
if [ -x $DIR/post-receive-user ]; then
  exec $DIR/post-receive-user
fi
Backups
SourceForge.net performs routine backups for all of our servers and will restore from these backups in the event of catastrophic server failure. We encourage projects to make their own backups of Git data as that data restore can be performed by the project in the event of accidental data destruction by a member of the project team.
Backups of a Git repository may be made using rsync.
Example (replace PROJECTNAME with the UNIX group name of your project):
$ rsync -av git.code.sf.net::p/PROJECTNAME/REPO.git .
Using rsync is important if repository-side configuration such as hook scripts, a 'description' file, and a non-default 'config' file are used.